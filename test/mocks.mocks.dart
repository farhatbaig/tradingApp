// Mocks generated by Mockito 5.4.4 from annotations
// in trading_app/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trading_app/config.dart' as _i3;
import 'package:trading_app/domain/symbol/entities/symbol.dart' as _i8;
import 'package:trading_app/domain/symbol/error/api_failures.dart' as _i7;
import 'package:trading_app/infrastructure/symbol/datasource/symbol_remote.dart'
    as _i2;
import 'package:trading_app/infrastructure/symbol/repository/symbol_repository.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSymbolRemoteDataSource_0 extends _i1.SmartFake
    implements _i2.SymbolRemoteDataSource {
  _FakeSymbolRemoteDataSource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfig_1 extends _i1.SmartFake implements _i3.Config {
  _FakeConfig_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SymbolRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSymbolRepository extends _i1.Mock implements _i5.SymbolRepository {
  MockSymbolRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SymbolRemoteDataSource get symbolRemoteDataSource => (super.noSuchMethod(
        Invocation.getter(#symbolRemoteDataSource),
        returnValue: _FakeSymbolRemoteDataSource_0(
          this,
          Invocation.getter(#symbolRemoteDataSource),
        ),
      ) as _i2.SymbolRemoteDataSource);

  @override
  _i3.Config get config => (super.noSuchMethod(
        Invocation.getter(#config),
        returnValue: _FakeConfig_1(
          this,
          Invocation.getter(#config),
        ),
      ) as _i3.Config);

  @override
  _i6.Future<_i4.Either<_i7.ApiFailure, List<_i8.SymbolData>>>
      getSymbolData() => (super.noSuchMethod(
            Invocation.method(
              #getSymbolData,
              [],
            ),
            returnValue: _i6
                .Future<_i4.Either<_i7.ApiFailure, List<_i8.SymbolData>>>.value(
                _FakeEither_2<_i7.ApiFailure, List<_i8.SymbolData>>(
              this,
              Invocation.method(
                #getSymbolData,
                [],
              ),
            )),
          ) as _i6.Future<_i4.Either<_i7.ApiFailure, List<_i8.SymbolData>>>);
}
